openapi: 3.0.3
info:
  title: Bank Cards Management System API
  description: |
    REST API for managing bank cards, users, and transactions.
    
    ## Features
    - User registration and authentication
    - JWT-based security
    - Card management (create, view, update status, delete)
    - Money transfers between own cards
    - Transaction history
    
    ## Authentication
    Most endpoints require JWT authentication. Use the `/auth/login` endpoint to obtain a token.
    
    ## Card Number Masking
    Card numbers are displayed in masked format (e.g., "** ** 1234") for security purposes.
  version: 1.0.0
  contact:
    name: Bank Development Team
    email: dev@bank.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.bank.com/api
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: "john_doe"
        fullName:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
          description: "Full card number (16 digits)"
          example: "1234567890123456"
        maskedCardNumber:
          type: string
          description: "Masked card number for display"
          example: "** ** 1234"
        cardHolderName:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          format: date
          example: "2027-12"
        balance:
          type: number
          format: decimal
          example: 1000.00
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        cardType:
          type: string
          enum: [DEBIT, CREDIT]
        ownerUsername:
          type: string
          example: "john_doe"

    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCard:
          $ref: '#/components/schemas/Card'
        toCard:
          $ref: '#/components/schemas/Card'
        amount:
          type: number
          format: decimal
          example: 100.00
        type:
          type: string
          enum: [TRANSFER, DEPOSIT, WITHDRAWAL]
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED, CANCELLED]
        description:
          type: string
          example: "Transfer to savings"
        createdAt:
          type: string
          format: date-time

    AuthRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "john_doe"
        password:
          type: string
          format: password
          example: "password123"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: "JWT token for authentication"
        username:
          type: string
          example: "john_doe"
        fullName:
          type: string
          example: "John Doe"

    UserRegistrationDto:
      type: object
      required:
        - username
        - password
        - fullName
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
        password:
          type: string
          format: password
          minLength: 6
          example: "password123"
        fullName:
          type: string
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"

    CardDto:
      type: object
      required:
        - cardHolderName
        - cardType
      properties:
        cardNumber:
          type: string
          pattern: '^\d{16}$'
          example: "1234567890123456"
        cardHolderName:
          type: string
          example: "John Doe"
        expiryDate:
          type: string
          format: date
          example: "2027-12"
        cardType:
          type: string
          enum: [DEBIT, CREDIT]

    TransferRequest:
      type: object
      required:
        - fromCardId
        - toCardId
        - amount
      properties:
        fromCardId:
          type: integer
          format: int64
          example: 1
        toCardId:
          type: integer
          format: int64
          example: 2
        amount:
          type: number
          format: decimal
          minimum: 0.01
          example: 100.00
        description:
          type: string
          example: "Transfer to savings"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request"
        message:
          type: string
          example: "The request could not be processed"
        timestamp:
          type: string
          format: date-time

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationDto'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards:
    get:
      tags:
        - Cards
      summary: Get user cards
      description: Get all cards for the authenticated user
      responses:
        '200':
          description: List of user cards
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Cards
      summary: Create a new card
      description: Create a new card for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardDto'
      responses:
        '201':
          description: Card created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{cardId}:
    get:
      tags:
        - Cards
      summary: Get card by ID
      description: Get a specific card by its ID
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Card details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Cards
      summary: Delete card
      description: Delete a card
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Card deleted successfully
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards/{cardId}/status:
    put:
      tags:
        - Cards
      summary: Update card status
      description: Update the status of a card (ACTIVE, BLOCKED, EXPIRED)
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: [ACTIVE, BLOCKED, EXPIRED]
      responses:
        '200':
          description: Card status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer between own cards
      description: Transfer money between user's own cards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '201':
          description: Transfer completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid transfer request or insufficient balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions:
    get:
      tags:
        - Transactions
      summary: Get user transactions
      description: Get all transactions for the authenticated user with pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: Page size
      responses:
        '200':
          description: Paginated list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  totalElements:
                    type: integer
                    format: int64
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/card/{cardId}:
    get:
      tags:
        - Transactions
      summary: Get card transactions
      description: Get all transactions for a specific card with pagination
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - name: size
          in: query
          schema:
            type: integer
            default: 20
          description: Page size
      responses:
        '200':
          description: Paginated list of transactions for the card
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  totalElements:
                    type: integer
                    format: int64
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
        '404':
          description: Card not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Cards
    description: Card management operations
  - name: Transactions
    description: Transaction and transfer operations